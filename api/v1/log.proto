syntax = "proto3";

package log.v1;

option go_package = "github.com/sodami-hub/proglog/api/log_v1"; // Go 코드의 패키지 명으로 사용됨

message Record {
    bytes value = 1;
    uint64 offset = 2;
}


// 9. gRPC 서비스 정의
/*
service 키워드는 컴파일러가 생성해야 할 서비스라는 의미이며, rpc로 시작하는 각각의 줄은 서비스의 엔드포인트이고,
요청과 응답의 자료형을 명시했따. 요청과 응답은 컴파일러가 Go 구조체로 변환해 줄 메시지이다.

스트리밍 엔드포인트
- ConsumeStream : 서버 측 스트리밍 RPC이다. 클라이언트가 서버에 요청을 보내면, 서버는 연속한 메시지들을 읽을 수 있는 스트림을 보낸다.enum
- ProduceStream : 양방향 스트리밍 RPC이다. 클라이언트와 서버 양쪽이 읽고 쓸 수 있는 스트림을 이용해 서로 연속한 메시지를 보낸다. 
서로 영향을 주지 않고 독립적으로 작동하므로 서버-클라이언트는 어떠한 순서로든 원하는 대로 읽고 쓸 수 있다.
*/
service Log {
    rpc Produce(ProduceRequest) returns (ProduceResponse) {}
    rpc Consume(ConsumeRequest) returns (ConsumeResponse) {}
    rpc ConsumeStream(ConsumeRequest) returns (stream ConsumeResponse) {}
    rpc ProduceStream(stream ProduceRequest) returns (stream ProduceResponse) {}
}

// 요청과 응답을 정의하는 코드
message ProduceRequest {
    Record record =1;
}

message ProduceResponse {
    uint64 offset =1;
}

message ConsumeRequest {
    uint64 offset =1;
}

message ConsumeResponse {
    Record record=1;
}